<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[工具以及一些学习网站]]></title>
    <url>%2F2017%2F12%2F11%2F%E5%B7%A5%E5%85%B7%E4%BB%A5%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[前言前端开发需要用到的工具和浏览的网站实在是太多了，今天把这段时间收集的一些资料都整理好统一一下吧，以便自己日后方便查询。 工具 VSCode安装：VSCode Node.js安装：Node.js 图片编辑软件：paint.net 命令行 编辑器之神 简明 vim 练级攻略 一个 vim 游戏 命令行释义 命令行常见用法 macOS 命令行安装与配置 安装 iTerm2 配置 Git SSH key原理与运用 README.md 的作用: 怎么给GitHub项目写一份易读的 README.md LISENCE 的作用: 如何选择开源许可证？ 常用 Git 命令清单 读懂 diff - 阮一峰 搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 Git 菜鸟教程 廖雪峰的 Git 教程 TCP 传输控制协议 TCP 和 UDP 的区别是什么 TCP 的三次握手指的是什么 深入了解TCP 0 到 1023 号端口 CSS我的建议是：中文学习资源只看大 V 的，英文资源看 CSS Tricks、MDN 和 Codrops。书的话作用不大，最权威的书其实是文档。 CSS一些好玩的小技巧：CSS-TRICKS 阮一峰 CSS 张鑫旭的 240 多篇 CSS 博客 Codrops 炫酷 CSS 效果 书单推荐：CSS揭秘 CSS中文规范文档 CSS英文规范文档 免费书在线：Magic of CSS 渐变生成：Gradient Generator 阴影生成：box-shadow JavaScriptJavaScript只推荐两个 书单：JavaScript高级程序设计 阮一峰javascript教程 学习网站 Emmet作弊表 10大最适合编程的字体推荐下载 各种数据算法 各种数据算法演示 计算机开放电子书汇总 工具网站 域名购买 设计网站：dribbble.com 阿里巴巴矢量图 超高清壁纸天堂：wallhaven 免费PSD网站设计模板 在线压缩JPG图像 图片上传生成网址：Image Upload 持续更新…]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git操作手册]]></title>
    <url>%2F2017%2F12%2F08%2FGit%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%2F</url>
    <content type="text"><![CDATA[配置 GitHub 进入 Github的SSH keys 如果页面里已经有一些 key，就点「delete」按钮把这些 key 全删掉。如果没有，就往下看 点击 New SSH key，你需要输入 Title 和 Key，但是你现在没有 key，往下看 打开 Git Bash 复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删掉，这句命令行如果你多打一个空格，可能就要重装系统了，建议复制运行。 运行 ssh-keygen -t rsa -b 4096 -C &quot;你的邮箱&quot;，注意填写你的邮箱！ 按回车三次 运行 cat ~/.ssh/id_rsa.pub，得到一串东西，完整的复制这串东西 回到上面第 3 步的页面，在 Title 输入「我的第一个 key」 在 Key 里粘贴刚刚你你复制的那串东西 点击 Add SSH key 回到 Git Bash 运行 ssh -T git@github.com，你可能会看到这样的提示：输入 yes 回车……问你话你就答，别傻在那 然后如果你看到 Permission denied (publickey). 就说明你失败了，请回到第 1 步重来，是的，回到第 1 步重来；如果你看到 Hi FrankFang! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 就说明你成功了！好了，终于 TMD 添加了一个无聊的 SSH key，不要问我这个有什么用，因为一会儿你就会用到它，你想了解原理就看这篇文章 如果要讲清楚，太浪费时间了，我们只是想用用 GitHub 而已。 一台电脑只需要一个 SSH key 一个 SSH key 可以访问你的所有仓库，即使你有 1000000 个仓库，都没问题 如果你新买了电脑，就在新电脑上重新生成一个 SSH key，把这个 key 也上传到 GitHub，它可以和之前的 key 共存在 GitHub 上 如果你把 key 从电脑上删除了，重新生成一个 key 即可，替换之前的 key 配置 git12345git config --global user.name //user.name改为你的英文名git config --global user.email //user.email你的邮箱git config --global push.default matchinggit config --global core.quotepath falsegit config --global core.editor "vim" 五句话，依次运行。不执行的话，电脑可能会爆炸你信不信。 使用 git使用 git 有三种方式，请按照你的需求选择 只在本地使用 将本地仓库上传到 GitHub 下载 GitHub 上的仓库 1.只在本地使用1.1 初始化 创建目录作为我们的项目目录：mkdir git-demo-2 进入目录 cd git-demo-2 git init，这句命令会在 git-demo-1 里创建一个 .git 目录 ls -la 你就会看到 .git 目录，它就是一个「仓库」，不要进去看，这仓库里面有毒，别进去！ 在 git-demo-1 目录里面添加任意文件，假设我们添加了两个文件，分别是 index.html 和 css/style.css touch index.htmlmkdir csstouch css/style.css 运行 git status -sb 可以看到文件前面有 ?? 号 ##Initial commit on master?? css/?? index.html 这个 ?? 表示 git 一脸懵逼，不知道你要怎么对待这些变动。 使用 git add 将文件添加到「暂存区」 你可以一个一个地 add git add index.htmlgit add css/style.css 你也可以一次性 add git add . 意思是把当前目录（.表示当前目录）里面的变动都加到「暂存区」 再次运行 git status -sb，可以看到 ?? 变成了 A ##Initial commit on masterA css/style.cssA index.html A 的意思就是添加，也就是说你告诉 git，这些文件我要加到仓库里 使用 git commit -m &quot;信息&quot; 将你 add 过的内容「正式提交」到本地仓库（.git就是本地仓库），并添加一些注释信息，方便日后查阅 你可以一个一个地 commit git commit index.html -m ‘添加index.html’git commit css/style.css -m “添加 css/style.css” 你也可以一次性commit git commit . -m “添加了几个文件” 再再次运行 git status -sb，发现没有文件变动了，这是因为文件的变动已经记录在仓库里了。这时你使用 git log 就可以看到历史上的变动： commit f0d95058cd32a332b98967f6c0a701c64a00810aAuthor: phoebechoi &#112;&#104;&#111;&#x65;&#x62;&#x65;&#99;&#x68;&#x6f;&#x69;&#x2e;&#105;&#115;&#x6d;&#101;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;Date: Thu Sep 28 22:30:43 2017 +0800 添加几个文件 以上就是 git add / git commit 的一次完整过程，可以看到，挺复杂的。原则上，错了任何一步，都从头来一遍，做到你不会再手抖为止。 1.2 文件变动如果我想继续改文件，应该怎么做呢？ start css/style.css 会使用默认的编辑器打开 css/style.css（macOS 上对应的命令是 open css/style.css） 然后我们在 css/style.css 里写入 body {background: red}，保存退出 运行 git status -sb 发现提示中有一个 M ##masterM css/style.css 这个 M 的意思就是 Modified，表示这个文件被修改了 此时你如果想让改动保存到仓库里，你需要先 git add css/style.css 或者也可以git add .注意，由于这个 css/style.css 以前被我们 add 过，你往文章上面看，我们是 add 过 css/style.css 的，所以此处的 git add 操作可以省略，但我建议你使用 git 的前一个月，不要省略 git add。换句话说，每一次改动，都要经过 git add 和 git commit 两个命令，才能被添加到 .git 本地仓库里。 再次运行 git status -sb 发现 M 由红色变成了绿色，红色和绿色有啥区别呢？别管它们的区别，记住我说的，先 add，再 commit，等你熟练之后再去理解区别。先形成肌肉记忆，在去形成大脑记忆！ 运行 git commit -m &quot;更新 css/style.css&quot;，这个改动就被提交到 .git 本地仓库了。再说一次，不要去 .git 目录里面，那里的东西你一无所知。 再再次运行 git status -sb，会发现没有变更了，这说明所有变动都被本地仓库记录在案了。这里来透露一下 git status -sb 是什么意思：git status 是用来显示当前的文件状态的，哪个文件变动了，方便你进行 git add 操作。-sb 选项的意思就是，SB都能看懂，哈，这是开玩笑，-s 的意思是显示总结（summary），-b 的意思是显示分支（branch），所以 -sb 的意思是显示总结和分支。 1.3 总结至此，我们来总结一下用到的命令 git init，初始化本地仓库 .git git status -sb，显示当前所有文件的状态 git add 文件路径，用来将变动加到暂存区 git commit -m &quot;信息&quot;，用来正式提交变动，提交至 .git 仓库 如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m &#39;xxx&#39; 两个命令即可。别看本教程废话那么多，其实就这一句有用！先 add 再 commit，行了，你学会 git 了。 git log 查看变更历史 2 将本地仓库上传到 GitHub如何将我们这个 git-demo-2 上传到 GitHub 呢？ 在 GitHub 上新建一个空仓库，名称随意，一般可以跟本地目录名一致，也叫做 git-demo-2按照截图所示，除了仓库名，其他的什么都别改，其他的什么都别改，其他的什么都别改，其他的什么都别改，这样你才能创建一个空仓库 点击创建按钮之后，GitHub 就会把后续的操作全告诉你，如图 看图，点击 SSH 按钮，点击 SSH 按钮，点击 SSH 按钮，我想你现在肯定不会忘了点击 SSH 按钮了吧~~~~如果不点击这个按钮，你就会使用默认的 HTTPS 地址。但是千万不要使用 HTTPS 地址，因为 HTTPS 地址使用起来特别麻烦，每次都要输入密码，而 SSH 不用输入用户名密码。为什么 SSH 不用密码呢，因为你已经上传了 SSH public key。 由于我们已经有本地仓库了，所以看图，图中下面半部分就是你需要的命令，我们一行一行拷贝过来执行 找到图中的「…or push an existing repository from the command line」这一行，你会看到 git remote add origin https://github.com/xxxxxxxxxx/git-demo-1.git， 如果你发现这个地址是 https 开头的，那你就做错了，还记得吗，我们要使用 SSH 地址，GitHub 的 SSH 地址是以 git@github.com 开头的。 再次点击 SSH 按钮，不管我强调多少遍，总会有人忘记点击 SSH 按钮，为什么呢？我也不知道，为了防止你忘了点击 SSH 按钮，我最后再说一遍，「点击 SSH按钮」，点击之后，整个世界就会变得美好起来。 得到新的命令 git remote add origin git@github.com:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/git-demo-1.git，复制并运行它 复制第二行 git push -u origin master，运行它 刷新当前页面，你的仓库就上传到 GitHub 了！是不是特别简单？只要你按照我说的做，一丝不苟，即可。 3 直接在 GitHub 创建一个仓库，然后下载到本地上面两步讲了 在本地创建仓库 将本地仓库上传到 GitHub 这里有第三种用法，那就是直接在 GitHub 创建一个仓库，然后下载到本地。 在GitHub 上新建一个仓库 git-demo-3，这次就不创建空仓库了，而是自带 README 和 Lisence 的仓库，创建截图如下：请按图中所示，填写一模一样的内容，然后点击创建按钮。 这样一来，这个仓库就会自动拥有两个文件（有些人可能会有三个文件，还有一个文件是.gitignore）： 这两个文件的作用请自行了解：README.md 的作用 以及 LISENCE 的作用 好了，现在远程仓库已经创建好了，怎么下载到我们的本地（也就是我们的电脑上）呢？答案是使用 git clone 命令 点击页面中唯一的绿色按钮「clone or download」，会看到一个弹出层 请确保弹出层里的地址是 SSH 地址，也就是 git@github.com 开头的地址，如果不是，就点击 Use SSH 按钮，就点击 Use SSH 按钮，就点击 Use SSH 按钮。然后复制这个地址。 打开 Git Bash，找一个安全的目录，比如 ~/Desktop 桌面目录就很安全：cd ~/Desktop。运行。 运行 git clone 你刚才得到的以git@github.com开头的地址，运行完了你就会发现，桌面上多出一个 git-demo-3 目录。我再说一遍，桌面上多出一个 git-demo-3 目录。我再说一遍，桌面上多出一个 git-demo-3 目录。这个细节很重要，很多人发现不了这个细节，我也不知道他们是眼瞎还是怎么了…… 然后cd git-demo-3，对的，你肯定会忽略这一步。 然后cd git-demo-3，对的，你肯定会忽略这一步。 然后cd git-demo-3，对的，你肯定会忽略这一步。 好了你进入了这个目录了，如果没有，我就要吐血了，因为我的提示很明显。 运行 ls -la 你会看到，远程目录的所有文件都在这里出现了，另外你还看到了 .git 本地仓库。这时你就可以添加文件，git add，然后 git commit 了。 三种方式都说完了，它们分别是： 在本地创建仓库 将本地仓库上传到 GitHub 下载 GitHub 上的仓库到本地 其实呢，我还可以说很多种不同的方式，但是，你记住这几种就行了，够你用的了。我们并不想要了解 git 的所有高级用法，我们的目的很明确：能通过 Git 命令使用 GitHub 就行。 我们再回顾一遍已经学到的命令：（这次只多了一个 git clone 命令） git clone git@github.com:xxxx，下载仓库 git init，初始化本地仓库 .git git status -sb，显示当前所有文件的状态 git add 文件路径，用来将变动加到暂存区 git commit -m &quot;信息&quot;，用来正式提交变动，提交至 .git 仓库 如果有新的变动，我们只需要依次执行 git add xxx 和 git commit -m &#39;xxx&#39;两个命令即可。别看本教程废话那么多，其实就这一句有用！先 add 再 commit，行了，你学会 git 了。 git log 查看变更历史 如何上传更新你在本地目录有任何变动，只需按照以下顺序就能上传： git add 文件路径 git commit -m &quot;信息&quot; git pull（相信我，你一定会忘记这一个命令） git push 下面是例子 cd git-demo-1 touch index2.html git add index2.html git commit -m &quot;新建 index2.html&quot; git pull git push然后你去 git-demo-1 的 GitHub 页面，就能看到 index2.html 出现在里面了。是不是很……简……单……呢…… 其他还有一些有用的命令 git remote add origin git@github.com:xxxxxxx.git 将本地仓库与远程仓库关联git remote set-url origin git@github.com:xxxxx.git 上一步手抖了，可以用这个命令来挽回 git branch新建分支 git merge 合并分支 git stash 通灵术 git stash pop 反转通灵术 git revert 后悔了 git reset 另一种后悔了 git diff 查看详细变化学 git 命令都够你们学一周的，所以别妄想现在就掌握它，切记。 资源 常用 Git 命令清单 读懂diff-阮一峰 搭建一个免费的，无限流量的Blog—-github Pages和Jekyll入门 Git 菜鸟教程 廖雪峰的 Git 教程]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>软件安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[笔记：导航页面]]></title>
    <url>%2F2017%2F12%2F08%2F%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%AF%BC%E8%88%AA%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[前言今天模仿一个导航页面 &gt;&gt;代码 流程 选择数据结构 使用 JS 创建 HTML 添加 CSS 添加事件监听 打开网站 知识点 &lt;kbd&gt;标签：键盘标签 uncaught syntaxerror unexpected token 语法错误 sublime正则(替换),点击面板查找,再点最左上边的点加星号,开始替换 onclick 用户点击事件onkeypress 键盘事件 oppend==echo &#39;hi&#39;&gt;&gt; 1.txt中的&gt;&gt; CSS: text-tranform:uppercase 指定如何将元素的文本大写，它可以用于使文本显示为全大写或全小写，也可单独对每一个单词进行操作。 local Storage ：审查元素 &gt; Application &gt; storage &gt; local Storage JS创建div：document.createElement(&#39;div&#39;) 用JS插入文字：textContent JS如何向用户要一个网址：[例]x=prompt(&#39;给我一个网址&#39;) 立体键盘：box-shadow属性 开发者工具模拟2/3G网络加载图片效果：检查元素 &gt; network &gt; Online &gt; slow3G &gt; 禁用缓存(Disable cache勾上) &gt; 页面清空(Elements) 背景自适应：background-size:cover; 获取各大网站logo：直接在地址栏尾加/favicon.ico 代码思路1.声明一个二维数组(var keys...) 2.声明一个hash(var hash...) 3.如果发现之前存过一个hash，就把之前的hash覆盖掉(var hashInLocalStorage...) 4.-遍历keys，生成多个kbd标签 -在每个kbd里面添加一个按钮，同时在按钮上做一个标记，标记它对应的id -然后这个按钮被点击的时候，去包含所有事件信息的hash里面取target,因为target才是用户点击的元素，buttonX不是用户点击的元素，因为buttonX会变 -向用户要一个网址 -只要用户输入这个网址，我就去变更这个hash -只要hash一改变，我就把hash存档到zzz里面 5.在用户点击某一个按钮的时候，去打开hash里面对应的网址，同时要求新窗口打开]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何购买域名]]></title>
    <url>%2F2017%2F11%2F28%2F%E5%A6%82%E4%BD%95%E8%B4%AD%E4%B9%B0%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[前言购买域名有两个选择 向国内服务商购买，不过你需要备案（备案就是把你的照片、姓名、住址 和手机号告诉管理机构） 向国外服务商购买，不需要备案，不过需要你懂一点英文 我们当然毫不犹豫地选择后者。 开始购买 进入域名购买搜索一个你喜欢的域名，比如我搜索的是phoebe-choi，然后你就会知道哪些域名是可以买的 其中最低的价格是.xyz域名，价格只要 1.89 美元，折合人民币 12 块五毛（每年），是不是很便宜。不要急，还有更便宜的，后面会教你搜索优惠码。现在我们先确定域名，如果你对.xyz不满意，可以选phoebe-choi.info，.info 域名比.xyz 稍微好看一点，当然你也可以选择phoene-choi.me、phoebe-choi.pro等。 选中你想要的域名，点击 REGISTER CHECKED DOMAINS 绿色按钮。 然后按照图中箭头设置隐私和期限 别急着结账，有一个地方可以输入优惠码（如图）去谷歌或者百度搜索「namesilo 优惠码」，填到里面，就可以优惠一美元！我搜到的优惠码是 onesaving。但是你要注意，一个用户只能使用一次优惠码，下次你再购买域名就没有优惠啦。 新用户注册完后，用支付宝结账（一定要先输入邮箱，再选中支付宝，最后点击 go） 购买成功！支付成功后域名就是你的了! 最后点击Manage my domains查看已经购买的域名。]]></content>
      <categories>
        <category>域名</category>
      </categories>
      <tags>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[预览Github上的页面]]></title>
    <url>%2F2017%2F11%2F26%2F%E9%A2%84%E8%A7%88Github%E4%B8%8A%E7%9A%84%E9%A1%B5%E9%9D%A2%2F</url>
    <content type="text"><![CDATA[前言很多新手把自己的网页上传到github仓库中却发现点进去相应的html文件显示出来的是下面代码，而不是自己想在网上看到自己仓库中的demo(也就是网页的效果) 那么我们有没有办法预览项目中的html网页呢？好在github已经推出了 GitHub Pages 功能，让大家方便的预览自己的 HTML。下面就给大家做一个简易教程。 步骤1. 登入 GitHub，新建一个 repo，设置如下： 2. 进入「settings」页面： 3. 往下滚，按照图片中1-2-3的顺序，开启 GitHub Pages 功能，得到一个「预览地址」，我的「预览地址」是 https://phoebe-choi.github.io/demo/. 4. 以后你就用这个「预览地址」来预览你的 html，比如你的 html 路径是 test/index.html，那么预览链接就是 https://phoebe-choi.github.io/demo/test/index.html 步骤如下: 新建 test/index.html 编辑好后点击下方的create new file即可创建文件，根据刚才创建的文件名称的相对路径就可以用「预览地址」来预览html文件了 在浏览器输入: https://phoebe-choi.github.io/demo/test/index.html进行预览 这样，你就能自己随时预览 GitHub 里的页面了！ 以后，你只需要用 git 上传代码到这个仓库，就可以拿到作业的预览链接了！]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内联、块级元素的高度和文档流]]></title>
    <url>%2F2017%2F11%2F25%2F%E5%86%85%E8%81%94%E3%80%81%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E7%9A%84%E9%AB%98%E5%BA%A6%E5%92%8C%E6%96%87%E6%A1%A3%E6%B5%81%2F</url>
    <content type="text"><![CDATA[内联元素的文档流先写十个span，并给这十个span加上样式，现在可以看到这十个span的方向是依次从左往右排开的。然后把网页拉到最外边界宽度最宽时，可以看到右边文字10已经断成两截了，并且自动换行继续从左往右散开。说明内联元素流动方向是从左往右流动的。 块级元素的文档流我们再写十个div，也给这十个div加上边框，下图可以看到，如果是块级元素，就不从左往右流动了；而是每一个块都占一行。若是再增加一个新的div进来，就会另起一行继续从上往下流动。说明块级元素的流动方向是从上往下依次流动的。 内联元素：英文和中文的流动现在把span里的内容换成一个长的英文串，再把网页拉到极限最宽。如下图，这说明了当一个内联元素里的内容为中文时，到达宽度极限的时候会自动换行；而当内联元素为英文，到达宽度极限时并不会换行，而是直接缩进了。 如果内联元素是一个很长的英文串，在默认情况下是不会分开的，若要解决这类问题，可以给这个元素加上一个属性：1word-break:break-all;/*把单词分断*/ 块级元素若要让两个块级元素不上下分行，使之并排在同一行里，或像内联元素一样依次连起来，可以用两种办法12display：inline-block; 或 float:left； 块级元素和内联元素的高度 块级元素块级元素的高度比较好理解，是由它内部文档流元素的总和决定的。 那么，内联元素的高度是由什么决定的呢？我们先给span一个font-size为100px，现在看看图片左边，能看出来现在这个hug的像素是多高吗？ 现在用尺子量一下，就可以看到这个hug的高度是97.5。并不足100。 我们再加两个中文字你好来看看 这个现象是不是很奇怪？我们现在加进去的你好量出来的高度才92.5，而刚刚hug量出来的高度是97.5，而我们给span的font-size是100px。再来看看下图 测量出来上下红线的高度是140px。不管是你好的高度还是hug的高度，都不是我们font-size的100px，这是为什么呢？其实内联元素的高度是没有确定性的，即使你给一个内联元素设定了一个高度的数值，但浏览器还是会默认读取这个字体的行高，并且给你添加一点建议高度 。所以font-size的高度指的是内联元素里字体最高点和最低点的高度。 内联元素的高度并不是我们设置的高度来决定的，而是由元素内部字体的最高低点决定的。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CSS绘制太极图]]></title>
    <url>%2F2017%2F11%2F25%2F%E4%BD%BF%E7%94%A8CSS%E7%BB%98%E5%88%B6%E5%A4%AA%E6%9E%81%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[首先画一下最外层的圆圈，并且左右两个半圆的背景设置成不同的颜色，分别代表阴阳。 12345678910.taiji&#123; border-style:solid; width:0; height:201px; border-radius:100%; border-right: 105px solid black; border-left:105px solid white; box-shadow: 0 0 25px 0 #333; margin: auto; &#125; 显示效果 然后画一个黑色的小空心圆，用margin对齐 123456789.taiji .black&#123; border:39px solid black; background-color: white; width: 25px; height: 25px; border-radius: 100%; margin-top: -3px; margin-left:-54px; &#125; 显示效果 最后把白色的空心圆也补上 12345678910.taiji .white&#123; display: block; background: black; border:39px solid white; width:25px; height:26px; border-radius:100%; margin-top:0px; margin-left:-56px;&#125; 完工！ 类似这种用CSS做出来的小玩意在这个网站上还有很多，非常有趣，打开看看吧 Tricks]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[备份博客源文件]]></title>
    <url>%2F2017%2F11%2F21%2F%E5%A4%87%E4%BB%BD%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[前言使用hexo+github搭建的博客,博客作为一个单独的github仓库存在,可是仓库中不包含你每篇博客的源文件。如果你换了一台机器想要更新博客或者不小心博客源文件丢失,那就真的是一件非常糟心的事，现在给出这个问题的一种解决办法吧。 实现方法 首先在Github下创建一个新的repo，取名为blog-generator。(空仓库名随意，与本地的Hexo源码文件夹同名即可) 打开Git界面，cd进入本地的Hexo文件夹，执行以下命令创建仓库: git init 继续执行下面命令设置远程仓库地址，并更新: git remote add origin git@github.com:xxxxxx/blog-generator.git (这里的xxxxxxx是你的用户名，记得用SSH地址)git pull origin master 执行命令以下命令，完成Hexo源码在本地的提交 git add .git commit -m “添加hexo源码文件作为备份” 执行以下命令，将本地的仓库文件推送到Github。 git push origin master git clone git@github.com:xxxxxx/blog-generator.git这个是你GitHub的SSH地址，千万别用错成HTTP的地址！ 博客更新后同步到远程仓库 在本地编写完博客时，顺次执行以下命令，即可完成Hexo博客源文件的更新同步，保持Github上的hexo源码为最新版本。 git add .git commit -m “更新hexo源文件”git push origin master 远程仓库更新后同步到本地仓库 当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。 git pull origin master 至此，Hexo源代码文件就同步和更新完了。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【HTML标签介绍】]]></title>
    <url>%2F2017%2F11%2F17%2F%E3%80%90HTML%E6%A0%87%E7%AD%BE%E4%BB%8B%E7%BB%8D%E3%80%91%2F</url>
    <content type="text"><![CDATA[前言Web浏览器中的网页的内容最根本的是文字，但网页中的内容在大多数时间都是风格文本而非纯文本。一个典型的网页基于集中技术（如CSS，JavaScript, Flash, AJAX, JSON）来控制终端用户的所见，但最根本的技术的是开发者用HTML来写网页，若没有HTML则没有网页。浏览器通过阅读HTML内容开始将网页展示在客户端设备上。 HTML的内容实在是太多了，今天写下这篇文章，先把所有的HTMLelements(元素)列出来。元素按功能分类，以方便日后更轻松地寻找元素。 根元素 元素 描述 &lt;html&gt; HTML &lt;html&gt; 元素 表示一个HTML文档的根（顶级元素），所所以它也被称为根元素。其他所有其他元素必须是此元素的后代。 文档元数据元数据（Metadata）含有页面的相关信息，包括样式、脚本及数据，能帮助一些软件 (如搜索引擎， 浏览器等等）更好地运用和渲染页面。对于样式和脚本的元数据，可以直接在网页里定义，也可以链接到包含相关信息的外部文件。 元素 描述 &lt;base&gt; HTML &lt;base&gt; 元素 指定用于一个文档中包含的所有相关URL的基本URL。一份中只能有一个&lt;base&gt;元素. &lt;head&gt; HTML head 元素 规定文档相关的通用信息（元数据），包括文档的标题，文档的样式和脚本的链接（定义）等。 &lt;link&gt; HTML 中&lt;link&gt;元素指定了外部资源与当前文档的关系. 这个元素的使用方法包括为导航定义关系框架.这个元素经常用来链接css文件。 &lt;meta&gt; HTML &lt;meta&gt; 元素表示那些不能由其它HTML元相关元素 (&lt;base&gt;, &lt;link&gt;, &lt;script&gt;, &lt;style&gt; 或 &lt;title&gt;) 之一表示的任何元数据信息. &lt;style&gt; HTML的&lt;style&gt;元素包含了文档的样式化信息或者文档的一部分。指定的样式化星系包含的该元素内，通常是CSS的格式。 &lt;title&gt; HTML &lt;title&gt; 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只可以包含文本，若是包含有标签，则包含的任何标签都不会被解释。 内容分区内容分区元素允许你将文档内容从逻辑上进行组织划分。使用包括页眉(header)、页脚(footer)、导航(nav)和标题(h1~h6)等分区元素，来为页面内容创建明确的大纲，以便区分各个章节的内容。 元素 描述 &lt;address&gt; HTML 的&lt;address&gt;元素可以让作者为它最近的&lt;article&gt;或者&lt;body&gt;祖先元素提供联系信息。在后一种情况下，它应用于整个文档。 &lt;article&gt; &lt;article&gt;元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。 &lt;aside&gt; &lt;aside&gt; 元素表示一个和其余页面内容几乎无关的部分，被认为是独立于该内容的一部分并且可以被单独的拆分出来而不会使整体受影响。其通常表现为侧边栏或者嵌入内容。他们通常包含在工具条，例如来自词汇表的定义。也可能有其他类型的信息，例如相关的广告、笔者的传记、web 应用程序、个人资料信息，或在博客上的相关链接。 &lt;footer&gt; HTML &lt;footer&gt; 元素表示最近一个章节内容或者根节点（sectioning root ）元素的页脚。一个页脚通常包含该章节作者、版权数据或者与文档相关的链接等信息。 &lt;h1–h6&gt; &lt;header&gt; &lt;header&gt;元素表示一组引导性的帮助，可能包含标题元素，也可以包含其他元素，像logo、分节头部、搜索表单等。 &lt;hgroup&gt; HTML &lt;hgroup&gt; Element (HTML Headings Group Element) 代表一个段的标题。它规定了在文档轮廓里（the outline of the document ）的单一标题是它所属的隐式或显式部分的标题。 &lt;nav&gt; HTML导航栏 (&lt;nav&gt;) 描绘一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表. &lt;section&gt; HTML Section 元素 (&lt;section&gt;) 表示文档中的一个区域（或节），比如，内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题 (&lt;h1&gt;-&lt;h6&gt; element) 作为子节点 来 辨识每一个&lt;section&gt;。 文本内容使用 HTML 文本内容元素来组织在开标签 &lt;body&gt; 和闭标签 &lt;/body&gt; 里的块或章节的内容。这些元素能标识内容的宗旨或结构，而这对于 accessibility 和 SEO 很重要。 元素 描述 &lt;blockquote&gt; HTML中的元素（或者 HTML 块级引用元素），代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 &lt;cite&gt; 元素。 &lt;dd&gt; HTML &lt;dd&gt; 元素（HTML 描述元素）用来指明一个描述列表 (&lt;dl&gt;) 元素中一个术语的描述。这个元素只能作为描述列表元素的子元素出现，并且必须跟着一个 &lt;dt&gt; 元素。 &lt;div&gt; HTML &lt;div&gt; 元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用是才使用 (比如 &lt;article&gt; 或 &lt;nav&gt;) 。 &lt;dl&gt; HTML &lt;dl&gt; 元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 (键-值对列表)。 &lt;dt&gt; HTML &lt;dt&gt; 元素 （或 HTML 术语定义元素）用于在一个定义列表中声明一个术语。该元素仅能作为 &lt;dl&gt; 的子元素出现。通常在该元素后面会跟着 &lt;dd&gt; 元素， 然而，多个连续出现的 &lt;dt&gt; 元素都将由出现在它们后面的第一个 &lt;dd&gt;元素定义。 &lt;figcaption&gt; HTML &lt;figcaption&gt; 元素 是与其相关联的图片的说明/标题，用于描述其父节点 &lt;figure&gt; 元素里的其他数据。这意味着 &lt;figcaption&gt; 在&lt;figure&gt; 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。 &lt;figure&gt; HTML &lt;figure&gt; 元素代表一段独立的内容, 经常与说明(caption) &lt;figcaption&gt; 配合使用, 并且作为一个独立的引用单元。当它属于主体(main flow)时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。 &lt;hr&gt; HTML &lt;hr&gt; 元素表示段落级元素之间的主题转换（例如，一个故事中的场景的改变，或一个章节的主题的改变）。在HTML的早期版本中，它是一个水平线。现在它仍能在可视化浏览器中表现为水平线，但目前被定义为语义上的，而不是表现层面上。 &lt;li&gt; HTML &lt;li&gt; 元素 (或者 HTML 列表条目元素) 用于表示列表里的条目。它必须被包含在一个父元素里：一个有顺序的列表(&lt;ol&gt;)，一个无顺序的列表(&lt;ul&gt;)，或者一个菜单 (&lt;menu&gt;)。在菜单或者无顺序的列表里，列表条目通常用点排列显示。在有顺序的列表里，列表条目通常是在左边有按升序排列计数的显示，例如数字或者字母。 &lt;main&gt; HTML Main元素(`&lt;main&gt;)呈现了文档&lt;body&gt;或应用的主体部分。主体部分由与文档直接相关，或者扩展于文档的中心主题、应用的主要功能部分的内容组成。这部分内容在文档中应当是独一无二的，不包含任何在一系列文档中重复的内容，比如侧边栏，导航栏链接，版权信息，网站logo，搜索框（除非搜索框作为文档的主要功能）。&lt;/main&gt; &lt;ol&gt; HTML &lt;ol&gt; 元素 表示多个有序列表项，通常渲染为有带编号的列表。 &lt;p&gt; HTML &lt;p&gt;元素（或者说 HTML 段落元素）表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外， 是块级元素。 &lt;pre&gt; HTML &lt;pre&gt; 元素表示预定义格式文本。在该元素中的文本通常按照原文件中的编排，以等宽字体的形式展现出来，文本中的空白符（比如空格和换行符）都会显示出来。(紧跟在 &lt;pre&gt;开始标签后的换行符也会被省略) &lt;ul&gt; The HTML&lt;ul&gt; 元素 ( 或 HTML 无序列表元素） 代表多项的无序列表，即无数值排序项的集合，且它们在列表中的顺序是没有意义的。通常情况下，无序列表项的头部可以是几种形式，如一个点，一个圆形或方形。头部的风格并不是在页面的HTML描述定义, 但在其相关的CSS 可以用 list-style-type 属性。 内联文本语义使用 HTML 内联文本语义(Inline text semantics)定义语句，结构，可以是一个词，一段，或任意风格的文字。 元素 描述 &lt;a&gt;HTML &lt;a&gt;元素 (或锚元素) 创建一个到其他网页，文件，同一页面内的位置，电子邮件地址或任何其他URL的超链接。 &lt;abbr&gt; HTML &lt;abbr&gt;元素代表缩写，并可选择提供一个完整的描述。 &lt;b&gt;HTML &lt;b&gt; 元素表示相对于普通文本字体上的区别，但不表示任何特殊的强调或者关联。它通常用在摘要中的关键字、审查中的产品名称或者其他需要显示为加粗的文字区域。它的另一个使用例子是用来标记一篇文章中每一段的引言。 &lt;bdi&gt; HTML &lt;bdi&gt; 元素 (双向隔离元素) 会隔离可能以不同方向进行格式化的外部文本。 &lt;bdo&gt; &lt;bdo&gt; 元素 (HTML双向覆盖元素)用于覆盖当前文本的朝向，它使得字符的排列方式被给定的方向覆盖。 &lt;br&gt; HTML 元素 换行 &lt;br&gt; 在文本中产生一个换行（回车键）。这对于写诗或写一个地址来说显得很有用。它可以将行明显地分开。 &lt;cite&gt; HTML引用（ Citation）标签 (&lt;cite&gt;) 表示一个作品的引用。它必须包含引用作品的符合简写格式的标题或者URL。It must include the title of a work or a URL reference, which may be in an abbreviated form according to the conventions used for the addition of citation metadata. &lt;code&gt; HTML &lt;code&gt; 元素呈现一段计算机代码. 默认情况下, 它以浏览器的默认等宽字体显示. &lt;data&gt; HTML &lt;data&gt; 元素 将一个指定内容和机器可读的翻译联系在一起。但如果内容是与 time 或者 date 相关的，一定要使用 &lt;time&gt;。 &lt;dfn&gt; HTML 定义元素 (&lt;dfn&gt;) 表示术语的一个定义。 &lt;em&gt; HTML 着重元素 (&lt;em&gt;) 标记出需要用户着重阅读的内容， &lt;em&gt; 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。 &lt;i&gt; HTML元素 &lt;i&gt; 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。 &lt;kbd&gt; HTML键盘输入元素(&lt;kbd&gt;) 用于表示用户输入，它将产生一个行内元素，以浏览器的默认monospace字体显示。 &lt;mark&gt; 这个 HTML mark 标签代表突出显示的文字,例如可以为了标记特定上下文中的文本而使用这个标签. 举个例子，它可以用来显示搜索引擎搜索后关键词。 &lt;q&gt; HTML引用标签 (&lt;q&gt;)表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 &lt;blockquote&gt; 替代. &lt;rp&gt; HTML &lt;rp&gt; 元素用于为那些不能使用 &lt;ruby&gt; 元素展示 ruby 注解的浏览器，提供随后的圆括号。 &lt;rt&gt; HTML&lt;rt&gt; element 包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 &lt;ruby&gt; 元素中使用。 &lt;rtc&gt; HTML &lt;rtc&gt; 元素包含文字的语义注解，它们在 &lt;rb&gt; 元素中展示。&lt;rb&gt; 元素可以拥有发音 (&lt;rt&gt;) 和语义(&lt;rtc&gt;) 注解。 &lt;ruby&gt; HTML &lt;ruby&gt; 元素 被用来展示东亚文字注音或字符注释。 &lt;s&gt; HTML &lt;s&gt; 元素 使用删除线来渲染文本。使用 &lt;s&gt; 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 &lt;s&gt; ；为此，提倡使用 &lt;del&gt; 和 &lt;ins&gt; 元素。 &lt;samp&gt; &lt;samp&gt; 元素用于标识计算机程序输出，通常使用浏览器缺省的 monotype 字体（例如 Lucida Console）。 &lt;small&gt; HTML 中的元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。 &lt;span&gt; HTML &lt;span&gt; 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者Id属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。&lt;span&gt; 与 &lt;div&gt; 元素很相似，但 &lt;div&gt; 是一个 块元素 而 &lt;span&gt; 则是 行内元素 . &lt;strong&gt; Strong 元素 (&lt;strong&gt;)表示文本十分重要，一般用粗体显示。 &lt;sub&gt; HTML &lt;sub&gt; 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。 &lt;sup&gt; HTML &lt;sup&gt; 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。 &lt;time&gt; HTML time 标签(&lt;time&gt;) 用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。 &lt;u&gt; HTML &lt;u&gt; 元素使文本在其内容的基线下的一行呈现下划线。在HTML5中, 此元素表示具有未标注的文本跨度，显示渲染，非文本注释，例如将文本标记为中文文本中的专有名称(一个正确的中文标记), 或 将文本标记为拼写错误。 &lt;var&gt; &lt;var&gt; 标签表示变量的名称，或者由用户提供的值。 &lt;wbr&gt; HTML &lt;wbr&gt; 元素 — 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。 图片和多媒体HTML 支持各种多媒体资源，例如图像，音频和视频。 元素 描述 &lt;area&gt; HTML &lt;area&gt; 元素 在图片上定义一个热点区域 &lt;audio&gt; HTML &lt;audio&gt; 元素用于在文档中表示音频内容。&lt;audio&gt; 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者&lt;source&gt;元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持&lt;audio&gt;元素的浏览器，&lt;audio&gt;元素也可以作为浏览器不识别的内容加入到文档中。 &lt;img&gt; HTML Image 元素（ &lt;img&gt; ）代表文档中的一个图像。 &lt;map&gt; HTML &lt;map&gt; 属性 与 &lt;area&gt;属性一起使用来定义一个图像映射(一个可点击的链接区域). &lt;track&gt; HTML &lt;track&gt; 元素 被当作媒体元素—&lt;audio&gt; 和 &lt;video&gt;的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕。 &lt;video&gt; HTML &lt;video&gt; 元素 用于在HTML或者XHTML文档中嵌入视频内容。 内嵌内容除了常规的多媒体内容，HTML 可以包括各种其他的内容，即使它并不容易交互。 元素 描述 &lt;embed&gt; HTML &lt;embed&gt; 元素 用于表示一个外部应用或交互式内容的集合点，换句话说，就是一个插件。 &lt;object&gt; HTML &lt;object&gt;元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。 &lt;param&gt; HTML &lt;param&gt; 元素(或 HTML Parameter 元素) 定义了 &lt;object&gt;的参数 &lt;source&gt; The HTML &lt;source&gt; element specifies multiple media resources for either the &lt;picture&gt;, the &lt;audio&gt; or the &lt;video&gt; element. It is an empty element. It is commonly used to serve the same media content in multiple formats supported by different browsers. 脚本为了创建动态内容和 Web 应用程序，HTML 支持使用脚本语言，最突出的就是 JavaScript。某些元素支持此功能。 元素 描述 &lt;canvas&gt; &lt;canvas&gt;元素可被用来通过脚本（通常是JavaScript）绘制图形。比如,它可以被用来绘制图形,制作图片集合,甚至用来实现动画效果。你可以(也应该)在元素标签内写入可提供替代的的代码内容，这些内容将会在在旧的、不支持&lt;canvas&gt;元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现。 &lt;noscript&gt; 如果页面上的脚本类型不受支持或者当前在浏览器中关闭了脚本，则HTML &lt;noscript&gt;元素定义要插入的html部分。&lt;/noscript&gt; &lt;script&gt; HTML &lt;script&gt;元素用于嵌入或引用可执行脚本。 编辑标识这些元素能标示出某个文本被更改过的部分。 元素 描述 &lt;del&gt; HTML 删除文字元素（&lt;del&gt;）表示已经从文档中删除的文本范围。此元素通常是（但不必）呈现删除线的文本。 &lt;ins&gt; HTML &lt;ins&gt; 元素定义已经被插入文档中的文本。 表格内容这里的元素用于创建和处理表格数据,元素在一个元素中可以出现一个或者更多。 元素 描述 &lt;caption&gt; HTML &lt;caption&gt; 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 &lt;table&gt;的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个一个相对于表格的做任意位置。 &lt;col&gt; HTML &lt;col&gt; 元素 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于&lt;colgroup&gt;元素内。 &lt;colgroup&gt; HTML 中的 表格列组（Column Group &lt;colgroup&gt;） 标签用来定义表中的一组列表。 &lt;table&gt; HTML的 table 元素表示表格数据 — 即通过二维数据表表示的信息。 &lt;tbody&gt; 这个 HTML 标签 &lt;td&gt; The Table cell HTML element (&lt;td&gt;) defines a cell of a table that contains data. It participates in the table model. &lt;tfoot&gt; &lt;th&gt; &lt;thead&gt; HTML的&lt;thead&gt;元素定义了一组定义表格的列头的行。 &lt;tr&gt; HTML &lt;tr&gt; 元素定义表格中的行。 Those can be a mix of &lt;td&gt; and &lt;th&gt; elements. 表单HTML 提供了许多可一起使用的元素，这些元素能用来创建一个用户可以填写并提交到网站或应用程序的表单。详情请参阅 HTML forms guide。 元素 描述 &lt;button&gt; HTML&lt;button&gt;元素 表示一个可点击的按钮。 &lt;datalist&gt; HTML Datalist 元素 (&lt;datalist&gt;) 包含了一组&lt;option&gt;元素,这些元素表示其它表单控件可选值. &lt;fieldset&gt; &lt;form&gt; HTML&lt;form&gt; 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。 &lt;input&gt; HTML&lt;input&gt; 元素用于为基于Web的表单创建交互式控件，以便接受来自用户的数据。 &lt;label&gt; HTML 元素表示用户界面中项目的标题。 &lt;legend&gt; HTML的&lt;legend&gt;元素（也称为HTML的域说明元素（or HMTLLegend Field Element））代表一个用于表示它的父元素&lt;fieldset&gt;的内容的标题&lt;/legend&gt; &lt;meter&gt; HTML&lt;meter&gt;元素用来显示已知范围的标量值或者分数值。 &lt;optgroup&gt; 在一个web表单中, HTML元素 &lt;optgroup&gt; 会创建包含在一个 &lt;select&gt;元素中的一组选项 &lt;option&gt; 在web表单中, HTML元素 &lt;option&gt; 用于定义在&lt;select&gt;, &lt;optgroup&gt; 或&lt;datalist&gt; 元素中包含的项.&lt;option&gt;可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。 &lt;output&gt; HTML 标签定义一个用户的操作或者计算的结果。 &lt;progress&gt; HTML中的progress (&lt;progress&gt;) 元素用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式. &lt;select&gt; HTML select (&lt;select&gt;) 元素是一种表单控件，可创建选项菜单。菜单内的选项为&lt;option&gt; , 可以由 &lt;optgroup&gt; 元素分组。选项可以被用户预先选择。 &lt;textarea&gt; HTML &lt;textarea&gt; 元素表示一个多行纯文本编辑控件。 交互元素HTML 提供了一系列有助于创建交互式用户界面对象的元素。 元素 描述 &lt;details&gt; HTML &lt;details&gt; 元素被用作发现小部件，用户可以从其中检索附加信息。 &lt;dialog&gt; HTML &lt;dialog&gt; 元素表示一个对话框或其他交互式组件，例如一个检查员或窗口。 &lt;menu&gt; HTML &lt;menu&gt; 元素 呈现了一组用户可执行或激活的命令。这既包含了可能出现在屏幕顶端的列表菜单，也包含了那些隐藏在按钮之下、当点击按钮后显示出来的文本菜单。 &lt;menuitem&gt; &lt;summary&gt; HTML &lt;summary&gt; 元素 用作 一个&lt;details&gt;元素的一个内容的摘要，标题或图例。 Web 组件Web 组件是种近似 HTML（HTML-related） 的技术，这使得它能够，从本质上讲，创建和使用自定义元素，就好像它是普通的 HTML。此外，你甚至可以创建自定义版本的标准 HTML 元素。注意: Web组件的元素都在 World Wide Web Consortium (W3C) Web Components collection of specifications 定义而不是 HTML 规范。此外，Web 组件规范还没有最后确定，随时有可能发生更改。 元素 描述 &lt;content&gt; HTML &lt;content&gt; 元素— Web 组件 的技术套件的废弃部分 — 用于 Shadow DOM 内部作为 insertion point，并且不可用于任何正常的 HTML，现在已被 &lt;slot&gt; 元素代替，它在 DOM 中创建一个位置，Shadow DOM 会插入这里。 &lt;element&gt; &lt;element&gt;元素被定义在最新的 HTML DOM 元素中。&lt;/element&gt; &lt;shadow&gt; HTML &lt;shadow&gt; 元素 — Web 组件技术套件的废弃部分 — 目的是用作 Shadow DOM insertion point。如果你在 shadow host 下面创建了多个 shadow root，你就可能已经使用了它。在正常的 HTML 没有任何用处。 &lt;slot&gt; HTML &lt;slot&gt; 标签是web组件技术的一部分，slot是web组件的一个占位符，可以用来插入自定义的标记文本。可以创建不同的DOM树并进行渲染。 &lt;template&gt; HTML &lt;template&gt; 元素 是一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用JavaScript进行实例化。 过时的和弃用的元素警告: 下面这些旧的 HTML 元素已被弃用，不应该再使用。你千万别在新的项目中使用它们，并且要尽快替换在旧项目里的。在此列出仅供参考。 元素 描述 &lt;acronym&gt; HTML Acronym 元素 (&lt;acronym&gt;) 允许作者明确地声明一个字符序列,，它们构成一个单词的首字母缩写或简略语。 &lt;applet&gt; HTML中的Applet元素(&lt;applet&gt;) 标志着包含了Java的applet。 &lt;basefont&gt; HTML标签&lt;basefont&gt;&lt;/basefont&gt;用来设置文档的默认字体大小。使用&lt;font&gt;可以相对于默认字体大小进行变化。 &lt;big&gt; The HTML Big Element (&lt;big&gt;) 会使字体加大一号（例如从小号(small)到中号(medium)，从大号(large)到加大(x-large)），最大不超过浏览器的最大字体。 &lt;blink&gt; HTML Blink Element (&lt;blink&gt;)不是标准元素，它会使包含其中的文本闪烁。 &lt;center&gt; HTML Center 元素 (&lt;center&gt;) 是个 块级元素，可以包含段落，以及其它块级和内联元素。这个元素的整个内容在它的上级元素中水平居中(通常是 &lt;body&gt;)。 &lt;command&gt; command元素用来表示一个用户可以调用的命令. &lt;content&gt; HTML &lt;content&gt; 元素— Web 组件 的技术套件的废弃部分 — 用于 Shadow DOM 内部作为 insertion point，并且不可用于任何正常的 HTML，现在已被 &lt;slot&gt; 元素代替，它在 DOM 中创建一个位置，Shadow DOM 会插入这里。 &lt;dir&gt; HTML 目录元素 (&lt;dir&gt;) 表示一个目录，也就是文件名称的集合。 &lt;element&gt; &lt;element&gt;元素被定义在最新的 HTML DOM 元素中。&lt;/element&gt; &lt;font&gt; HTML Font 元素（&lt;font&gt;）定义了该内容的字体大小、顏色与表现。 &lt;frame&gt; &lt;frame&gt; 是 HTML 元素，它定义了一个特定区域，另一个 HTML 文档可以在里面展示。帧应该在 &lt;frameset&gt;中使用。 &lt;frameset&gt; &lt;frameset&gt; 是一个HTML元素，用于包含 &lt;frame&gt;元素。 &lt;image&gt; HTML &lt;image&gt;元素曾经是一个试验性的元素，用来显示图片。它从未被实现过，请使用标准的&lt;img&gt;元素。 &lt;isindex&gt; &lt;isindex&gt;元素的作用是使浏览器显示一个对话框，提示用户输入单行文本。在W3C的规范中建议，&lt;isindex&gt;元素最好被放置在 &lt;head&gt;标签块内，但是对于浏览器来说，&lt;isindex&gt;标签在页面任何位置都没有关系。 &lt;keygen&gt; HTML &lt;keygen&gt; 元素是为了方便生成密钥材料和提交作为 HTML form 的一部分的公钥.这种机制被用于设计基于 Web 的证书管理系统。按照预想，&lt;keygen&gt; 元素将用于 HTML 表单与其他的所需信息一起构造一个证书请求，该处理的结果将是一个带有签名的证书。 &lt;listing&gt; HTML 列表元素 (&lt;listing&gt;) 渲染了开始和结束标签之间的文本，而不会解释 HTML，并使用等宽字体。HTML2 标准建议，当一行不超过 132 个字符时，不应该将其拆开。 &lt;marquee&gt; HTML marquee 元素（&lt;marquee&gt;） 用来插入一段滚动的文字。你可以使用它的属性控制当文本到达容器边缘发生的事情。 &lt;multicol&gt; HTML&lt;multicol&gt; 元素是一个实验元素，旨在允许多列布局。它从来没有任何显着的牵引力，并没有在任何主流浏览器中实现。&lt;/multicol&gt; &lt;nextid&gt; &lt;noembed&gt; &lt;noembed&gt; 元素是个废除的和不标准的方式，用于向不支持 &lt;embed&gt; ，或者不支持作者希望的 嵌入式内容 的浏览器提供替代（或者“后备”）内容。这个元素在 HTML 4.01 起废除，以支持 &lt;plaintext&gt; HTML 纯文本元素 (&lt;plaintext&gt;) 将起始标签后面的任何东西渲染为纯文本，不会解释为 HTML。它没有闭合标签，因为任何后面的东西都会看做纯文本。 &lt;shadow&gt; HTML &lt;shadow&gt; 元素 — Web 组件技术套件的废弃部分 — 目的是用作 Shadow DOM insertion point。如果你在 shadow host 下面创建了多个 shadow root，你就可能已经使用了它。在正常的 HTML 没有任何用处。 &lt;spacer&gt; &lt;spacer&gt; 是过时的 HTML 元素，它可以向页面插入间隔。它由 Netscape 设计，用于实现单像素布局图像的相同效果，Web 设计师用它来向页面添加空白，而不需要实际使用图片。 但是，&lt;spacer&gt; 不再受任何主流浏览器支持，并且相同效果可以简单由 CSS 实现。 &lt;strike&gt; HTML &lt;strike&gt;元素（或者 HTML 删除线元素）在文本上放置删除线。 &lt;tt&gt; HTML 电报文本元素 (&lt;tt&gt;) 产生一个内联元素，使用浏览器内置的 monotype 字体展示。这个元素用于给文本排版，使其等宽展示，就像电报那样。使用 &lt;code&gt;元素来展示等宽文本可能更加普遍。 &lt;xmp&gt; &lt;xmp&gt;标签之间的内容不会被当作文档内容解析，而会被用等宽字体直接呈现。HTML2规范建议，本标签中的内容应该具有足够容纳每行80个字母的宽度。&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/p&gt;&lt;/xmp&gt;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo搭建独立博客教程]]></title>
    <url>%2F2017%2F11%2F15%2F%E3%80%90Hexo%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%E3%80%91%2F</url>
    <content type="text"><![CDATA[准备工作 在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个； 安装了node.js（官网下载安装），默认会安装npm。 安装git（官网下载安装） 安装hexo了，方法：打开git，输入cd运行npm install -g hexo（要翻墙） 开始搭建 打开git，然后cd~/Desktop 登录GitHub，在 GitHub 上新建一个空 repo，repo 名称是「你的用户名.github.io」。（请将你的用户名替换成真正的用户名 建立好空repo后，回到git命令行界面 运行npm install -g hexo-cli，安装Hexo 继续运行hexo init myBlog 继续运行cd myBlog 继续运行npm i 运行hexo new开博大吉，你会看到一个md文件的路径 运行start xxxxxxxxxxxxxxxxxxx.md，编辑这个md文件，内容自己想（Ubuntu系统用xdg-open xxxxxxxxxxxxxxxxxxx.md命令） 继续运行start _config.yml，编辑网站配置 把第 6 行的 title 改成你想要的名字 把第 9 行的 author 改成你的大名 把最后一行的 type 改成 type: git 在最后一行，在 type 下面，加上一行 repo: 仓库地址 ， 仓库地址改为「你的用 户名.github.io」，仓库地址以 git@github.com: 开头格式如下 &gt; repo: git@github.com:你的用户名.github.io 第 4 步的 repo: 后面有个空格，不要眼瞎 继续运行npm install hexo-deployer-git –save，安装git部署插件 继续运行hexo deploy 到这里博客已经搭建好了，打开Github，进入「你的用户名.github.io」对应的repo。 你现在应该看到了你的博客了。 更换主题 主题上面有主题合集 随便找一个主题，进入主题的GitHub首页，比如我找的是 链接 复制它的SSH地址或HTTPS地址，假设地址为 git@github.com:iissnan/hexo-theme-next.git 打开git命令行界面 运行cd themes 运行git clone git@github.com:iissnan/hexo-theme-next.git 运行cd .. (这里意思是返回上一层) 将_config.yml的第75行改为theme: hexo-theme-next，保存 运行hexo generate 运行hexo deploy 等一分钟，然后刷新你的博客页面，你会看到一个新的外观。如果不喜欢这个主题，就回到第1步，重选一个主题。 至此，博客已经搭建完成了！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
